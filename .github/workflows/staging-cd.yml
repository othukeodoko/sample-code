name: Verify AWS Authentication and Build

on:
  push:
    branches:
      - main

jobs:
  verify-aws:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'
      - name: Verify AWS Authentication
        run: |
          echo "Verifying AWS Authentication..."
          aws sts get-caller-identity
          aws s3 ls
          echo "Successfully authenticated with AWS!"

  build:
    runs-on: ubuntu-latest
    needs: verify-aws
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET 7 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 7.x
      - name: Restore Dependencies
        run: dotnet restore ./myWebApp.csproj
      - name: Build Project
        run: dotnet build ./myWebApp.csproj --no-restore
      - name: Run Tests
        run: dotnet test ./myWebApp.csproj --no-build --verbosity normal

  publish:
    runs-on: ubuntu-latest
    needs: [verify-aws, build]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET 7 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 7.x

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.REPOSITORY }}

      - name: Publish Docker Image to Amazon ECR
        working-directory: ./
        run: |
          docker build . --file Dockerfile --tag ${{ secrets.REPOSITORY }}:latest
          docker push ${{ secrets.REPOSITORY }} --all-tags
